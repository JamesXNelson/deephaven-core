
# This is a bit ugly, but, for now, we're going to define the entire cluster in this one file.
# This includes pulling out all the envoy config, so we can change things as we please
# without interfering with the simple docker-compose deployment using envoy.yaml in source tree
apiVersion: v1
kind: Secret
metadata:
  name: secret-envoy
type: kubernetes.io/tls
data:
  # these are our *.localhost.int.illumon.com certs, and should NOT be committed as-is.
  # we'll want to instead make a parameterized
  tls.crt: >-
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZKekNDQkErZ0F3SUJBZ0lTQXo2TTk1THNDUjhGd3hxcVJ5Tm9YdXNtTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEEyTURVeE5qUXdNRFJhRncweU1UQTVNRE14TmpRd01EUmFNQnd4R2pBWUJnTlZCQU1NCkVTb3VhVzUwTG1sc2JIVnRiMjR1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTRHODlnWVNyblc1RjdrdllOeUU3TGgvNkFWem5NTjA3TytWTERNcGdIY0NNQ2N1b21SdnhJOGJPVE1ZUApheUkwekFuRTVHQUo0bkMzcHBZRWJTN3IyZ0NyNzJDT1hWR2tqMi9xbENLL3NLK2dEbXhFUGRKWnFIVWRYejRGCnZFVXNNYXZQRGRDcVNqVUZyeHRONGppNGFZQXdWRkRDTFNFQXpyNXFYSVc1T0tuZUQ3cFhHRzBDVHY5L3ZIZkcKUVgyZm9heDF0NTlMVzdXK2xyYWxiSkw5aFNyaSt6TUVpTzkyMVJza0gyRHEvQ09FSDErTWtEcjArTU53MHpCMgpZeTJoejg0Y09SaWFNbUlIVXE4djNnSnNXank3eXE1QSthRWFpWldMNG9EUTFsSEozWEJWcGRYN28zcWptT1dGCnp3WkFNNStRRllNWjNDSWplZUhtckozUTN3SURBUUFCbzRJQ1N6Q0NBa2N3RGdZRFZSMFBBUUgvQkFRREFnV2cKTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUIwRwpBMVVkRGdRV0JCUkVISFQ2U250QXlobjFzeHU3aEFkem5UcjNtVEFmQmdOVkhTTUVHREFXZ0JRVUxyTVh0MWhXCnk2NVFDVURtSDYrZGl4VEN4akJWQmdnckJnRUZCUWNCQVFSSk1FY3dJUVlJS3dZQkJRVUhNQUdHRldoMGRIQTYKTHk5eU15NXZMbXhsYm1OeUxtOXlaekFpQmdnckJnRUZCUWN3QW9ZV2FIUjBjRG92TDNJekxta3ViR1Z1WTNJdQpiM0puTHpBY0JnTlZIUkVFRlRBVGdoRXFMbWx1ZEM1cGJHeDFiVzl1TG1OdmJUQk1CZ05WSFNBRVJUQkRNQWdHCkJtZUJEQUVDQVRBM0Jnc3JCZ0VFQVlMZkV3RUJBVEFvTUNZR0NDc0dBUVVGQndJQkZocG9kSFJ3T2k4dlkzQnoKTG14bGRITmxibU55ZVhCMExtOXlaekNDQVFNR0Npc0dBUVFCMW5rQ0JBSUVnZlFFZ2ZFQTd3QjJBRVNVWlM2dwo3czZ2eEVBSDJLaitLTURhNW9LKzJNc3h0VC9UTTVhMXRvR29BQUFCZWQxQ3JRSUFBQVFEQUVjd1JRSWdaaGdUCjhoZ3ExaUp5VlpZUnlmRVpxS3Y3V2ZQdVpFQTdFdWV3R2w0bGRoa0NJUUM1RjhPZ0lGSWRwNXhPUExyMThNU1kKZ3JUdWhOWjFxaVZiZU4rWW1KZnhxZ0IxQUgwKzh2aVAvNGhWYUNUQ3dNcWVVb2w1SzhVT2VBbC9MbXFYYUpsKwpJdkRYQUFBQmVkMUNyVEVBQUFRREFFWXdSQUlnYS9sbHhWdDhQNjU4N0cyU0JZaGVjRzIxV0Z3OW4ybi9GT2hkCkxrdnJWVGtDSUhkVUtsV1lydkgwZzg4dkp3b2U2M0QrZFd5REg1WmNDLzZFZ0w3WmYxVm5NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCTkFWb3dheXB0NkVueExwdklNODYwMmJvZnBVKy9nb3J1MkduY01oeEpaaFQ2MGtSOApOZUhBOFZDOCtBMC8rbEdHaTdBaUNtRW9McXB4QTNBVjN1cU9SQUxNZ0oxL2szNit2SE94bnpjSGFyQStyTkUzCjFvMDRQbmRIMWRYbGhYb0dvblFXY0kxNkJhb2FCeGZPL2RWbHI3ZCtWOVpjbkZhVXZFNEhGZjlZb0JTdGptMnYKQU9pKzF1eitESGwvcnJhU2JEYlZFSzFsSUw4YnZYanVWZXgyTHBQb25LdWhLRVpFb0hTamI4SW5ZcUJtYzhTVQpDeFZscDJTVnhIdGZEbktNaXBtcUtMWXhhWUhPMkFZdzREUk9JY2RiL1BkcFZvcDN4T0h5Z21OMEJRQ1FZbS82Cmdsa0g0NU43Qko0QnpCd3AzNHNKRHVqOTY5RDRzS3Ircm5NbgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGRmpDQ0F2NmdBd0lCQWdJUkFKRXJDRXJQREJpblUvYldMaVduWDFvd0RRWUpLb1pJaHZjTkFRRUxCUUF3ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdIaGNOTWpBd09UQTBNREF3TURBdwpXaGNOTWpVd09URTFNVFl3TURBd1dqQXlNUXN3Q1FZRFZRUUdFd0pWVXpFV01CUUdBMVVFQ2hNTlRHVjBKM01nClJXNWpjbmx3ZERFTE1Ba0dBMVVFQXhNQ1VqTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRQzdBaFVvelBhZ2xOTVBFdXlOVlpMRCtJTHhtYVo2UW9pblhTYXF0U3U1eFV5eHI0NXIrWFhJbzljUApSNVFVVlRWWGpKNm9vamtaOVlJOFFxbE9idlU3d3k3YmpjQ3dYUE5aT09mdHoybndXZ3NidnNDVUpDV0gramR4CnN4UG5IS3pobSsvYjVEdEZVa1dXcWNGVHpqVElVdTYxcnUyUDNtQnc0cVZVcTdadERwZWxRRFJySzlPOFp1dG0KTkh6NmE0dVBWeW1aK0RBWFhicHliL3VCeGEzU2hsZzlGOGZuQ2J2eEsvZUczTUhhY1YzVVJ1UE1yU1hCaUx4ZwpaM1Ztcy9FWTk2SmM1bFAvT29pMlI2WC9FeGpxbUFsM1A1MVQrYzhCNWZXbWNCY1VyMk9rLzVtems1M2NVNmNHCi9raUZIYUZwcmlWMXV4UE1VZ1AxN1ZHaGk5c1ZBZ01CQUFHamdnRUlNSUlCQkRBT0JnTlZIUThCQWY4RUJBTUMKQVlZd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3SUdDQ3NHQVFVRkJ3TUJNQklHQTFVZEV3RUIvd1FJTUFZQgpBZjhDQVFBd0hRWURWUjBPQkJZRUZCUXVzeGUzV0ZiTHJsQUpRT1lmcjUyTEZNTEdNQjhHQTFVZEl3UVlNQmFBCkZIbTBXZVo3dHVYa0FYT0FDSWpJR2xqMjZadHVNRElHQ0NzR0FRVUZCd0VCQkNZd0pEQWlCZ2dyQmdFRkJRY3cKQW9ZV2FIUjBjRG92TDNneExta3ViR1Z1WTNJdWIzSm5MekFuQmdOVkhSOEVJREFlTUJ5Z0dxQVloaFpvZEhSdwpPaTh2ZURFdVl5NXNaVzVqY2k1dmNtY3ZNQ0lHQTFVZElBUWJNQmt3Q0FZR1o0RU1BUUlCTUEwR0N5c0dBUVFCCmd0OFRBUUVCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDRnlrNUhQcVAzaFVTRnZOVm5lTEtZWTYxMVRSNlcKUFRObGNsUXRnYURxdyszNElMOWZ6TGR3QUxkdU8vWmVsTjdrSUorbTc0dXlBK2VpdFJZOGtjNjA3VGtDNTN3bAppa2ZtWlc0L1J2VFo4TTZVSys1VXpoSzhqQ2RMdU1HWUw2S3Z6WEdSU2dpM3lMZ2pld1F0Q1BrSVZ6NkQyUVF6CkNrY2hlQW1DSjhNcXlKdTV6bHp5Wk1qQXZubkFUNDV0UkF4ZWtyc3U5NHNRNGVnZFJDbmJXU0R0WTdraCtCSW0KbEpOWG9CMWxCTUVLSXE0UURVT1hvUmdmZnVEZ2hqZTFXckc5TUwrSGJpc3EveUZPR3dYRDlSaVg4RjZzdzZXNAphdkF1dkRzenVlNUwzc3o4NUsrRUM0WS93RlZETnZabzRUWVhhbzZaMGYrbFFLYzB0OERRWXprMU9YVnU4cnAyCnlKTUM2YWxMYkJmT0RBTFp2WUg3bjdkbzFBWmxzNEk5ZDFQNGpua0RyUW94QjNVcVE5aFZsM0xFS1E3M3hGMU8KeUs1R2hERFg4b1ZmR0tGNXUrZGVjSXNINFlhVHc3bVAzR0Z4SlNxdjMrMGxVRkpvaTVMYzVkYTE0OXA5MElkcwpoQ0V4cm9MMSs3bXJ5SWtYUGVGTTVUZ085cjBydlphQkZPdlYyejBncDM1WjArTDRXUGxidUVqTi9seFBGaW4rCkhsVWpyOGdSc0kzcWZKT1FGeS85cktJSlIwWS84T213dC84b1RXZ3kxbWRlSG1tams3ajFuWXN2QzlKU1E2WnYKTWxkbFRUS0IzemhUaFYxK1hXWXA2cmpkNUpXMXpiVldFa0xOeEU3R0pUaEVVRzNzemdCVkdQN3BTV1RVVHNxWApuTFJid0hPb3E3aEh3Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZZRENDQkVpZ0F3SUJBZ0lRUUFGM0lUZlU2VUs0N25hcVBHUUt0ekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXdNMW93ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ3Q2Q1J6OUJRMzg1dWVLMWNvSEllKzNMZmZPSkNNYmp6bVY2QjQ5M1hDCm92NzFhbTcyQUU4bzI5NW9obXhFazdheFkvMFVFbXUvSDlMcU1ac2hmdEV6UExwSTlkMTUzN080L3hMeElacEwKd1lxR2NXbEtabVpzajM0OGNMK3RLU0lHOCtUQTVvQ3U0a3VQdDVsK2xBT2YwMGVYZkpsSUkxUG9PSzVQQ20rRApMdEZKVjR5QWRMYmFMOUE0alhzRGNDRWJkZkl3UFBxUHJ0M2FZNnZyRmsvQ2poRkxmczhMNlArMWR5NzBzbnRLCjRFd1NKUXh3alFNcG9PRlRKT3dUMmU0WnZ4Q3pTb3cvaWFOaFVkNnNod2VVOUdOeDdDN2liMXVZZ2VHSlhEUjUKYkhidk81QmllZWJicEpvdkpzWFFFT0VPM3RrUWpoYjd0L2VvOThmbEFnZVlqellJbGVmaU41WU5ObldlK3c1eQpzUjJidkFQNVNRWFlnZDBGdENyV1FlbXNBWGFWQ2cvWTM5VzlFaDgxTHlnWGJOS1l3YWdKWkhkdVJ6ZTZ6cXhaClhtaWRmM0xXaWNVR1FTaytXVDdkSnZVa3lSR25XcU5NUUI5R29abTFwenBSYm9ZN25uMXlweElGZUZudFBsRjQKRlFzRGo0M1FMd1d5UG50S0hFdHpCUkw4eHVyZ1VCTjhRNU4wczhwMDU0NGZBUWpRTU5SYmNUYTBCN3JCTURCYwpTTGVDTzVpbWZXQ0tvcU1wZ3N5NnZZTUVHNktEQTBHaDFnWHhHOEsyOEtoOGhqdEdxRWdxaU54Mm1uYS9IMnFsClBSbVA2emp6Wk43SUt3MEtLUC8zMitJVlF0UWkwQ2RkNFhuK0dPZHdpSzFPNXRtTE9zYmRKMUZ1Lzd4azlUTkQKVHdJREFRQUJvNElCUmpDQ0FVSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZdwpTd1lJS3dZQkJRVUhBUUVFUHpBOU1Ec0dDQ3NHQVFVRkJ6QUNoaTlvZEhSd09pOHZZWEJ3Y3k1cFpHVnVkSEoxCmMzUXVZMjl0TDNKdmIzUnpMMlJ6ZEhKdmIzUmpZWGd6TG5BM1l6QWZCZ05WSFNNRUdEQVdnQlRFcDdHa2V5eHgKK3R2aFM1QjEvOFFWWUlXSkVEQlVCZ05WSFNBRVRUQkxNQWdHQm1lQkRBRUNBVEEvQmdzckJnRUVBWUxmRXdFQgpBVEF3TUM0R0NDc0dBUVVGQndJQkZpSm9kSFJ3T2k4dlkzQnpMbkp2YjNRdGVERXViR1YwYzJWdVkzSjVjSFF1CmIzSm5NRHdHQTFVZEh3UTFNRE13TWFBdm9DMkdLMmgwZEhBNkx5OWpjbXd1YVdSbGJuUnlkWE4wTG1OdmJTOUUKVTFSU1QwOVVRMEZZTTBOU1RDNWpjbXd3SFFZRFZSME9CQllFRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFLY3dCc2xtNy9EbExRcnQyTTUxb0dyUytvNDQrL3lRb0RGVkRDCjVXeEN1MitiOUxSUHdrU0lDSFhNNndlYkZHSnVlTjdzSjdvNVhQV2lvVzVXbEhBUVU3Rzc1Sy9Rb3NNckFkU1cKOU1VZ05UUDUyR0UyNEhHTnRMaTFxb0pGbGNEeXFTTW81OWFoeTJjSTJxQkRMS29ia3gvSjN2V3JhVjBUOVZ1RwpXQ0xLVFZYa2NHZHR3bGZGUmpsQno0cFlnMWh0bWY1WDZEWU84QTRqcXYySWw5RGpYQTZVU2JXMUZ6WFNMcjlPCmhlOFk0SVdTNndZN2JDa2pDV0RjUlFKTUVoZzc2ZnNPM3R4RStGaVlydXE5UlVXaGlGMW15djRRNlcrQ3lCRkMKRGZ2cDdPT0dBTjZkRU9NNCtxUjlzZGpvU1lLRUJwc3I2R3RQQVF3NGR5NzUzZWM1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: >-
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNEc4OWdZU3JuVzVGN2t2WU55RTdMaC82QVZ6bk1OMDdPK1ZMRE1wZ0hjQ01DY3VvCm1SdnhJOGJPVE1ZUGF5STB6QW5FNUdBSjRuQzNwcFlFYlM3cjJnQ3I3MkNPWFZHa2oyL3FsQ0svc0srZ0RteEUKUGRKWnFIVWRYejRGdkVVc01hdlBEZENxU2pVRnJ4dE40amk0YVlBd1ZGRENMU0VBenI1cVhJVzVPS25lRDdwWApHRzBDVHY5L3ZIZkdRWDJmb2F4MXQ1OUxXN1crbHJhbGJKTDloU3JpK3pNRWlPOTIxUnNrSDJEcS9DT0VIMStNCmtEcjArTU53MHpCMll5Mmh6ODRjT1JpYU1tSUhVcTh2M2dKc1dqeTd5cTVBK2FFYWlaV0w0b0RRMWxISjNYQlYKcGRYN28zcWptT1dGendaQU01K1FGWU1aM0NJamVlSG1ySjNRM3dJREFRQUJBb0lCQUR0SVJ1ZlNRbjZJSlVLbgptQW9mNWdEdUExeWV6SmFVcVZQTjRrQVRxTVhUR1dwdytDelJPNlhtbXBHZTgyMnFFR1lnNG5nc2dnL2xGQzJWCmpML0dXQmd5ZXpmMHVrWWVEYWl4dURXKzVBRm9zbzk4dTUzVTFVZncvM3dyNXRudkw1aERPS0wraml5aHlzbVIKSGNaMmt3ZVRDN0VKei9DWnVodmlJamdrUG1PZnhFeXBHZ2c3ODd3Uy9xL3dVcSticnRvUXRxSWhNVDhPaUd2bAoyeWpodG54QVZ6ODNuamxtdlc3WmR5UnZTVzBJSGhnVlBoQ0s1Y0VzWUtRRlR3dUNmUlJleDdweitQNWJWM1ZmCkphUE1CelJlREl1bU16ZFhZdStkbElCWHhLVmRHcHAwYlZ1VVJOUEtCN01zVTR6WWozMERQMFNTUU14T05iSFQKVHVtSkJ1RUNnWUVBNS82bjBqSkZoVDNwdjB6dVNKKzVFS2t1SjEwdWdyTml1NnpQbjA0MWJkcnRvVnM3WmJybgpJWGcrMWJMRVd4ald2UEJQSlY1cjE2cU0vZlFiMDhzTDNNa1NwRHZZUWVvVzNxUzFKWUo5dWlQM3JpTXpaeWFHCkZTU1B4Q2RDdmxPWk5wTVFnY0w3cGdXUTVURW9YWENFclBkVmZUWVZLaGRjazRpbDQ2eTU2dkVDZ1lFQTk2aFMKTENaS2tScSs1MVJ4M1ZlN2NTME9zRVRTbWs2dVVteUY4K2RBWFJxNHQyUDVJeElwcDJaQXJLK3ZWSmpSYlZlUQpjQm1zMUxHcGRiL04yNENVd1M3MVlOQUV0ajRHaTBNMkRSZ2FmSlYxUzBSRTRDa3FHZHlRUGI0NXlLdTN3ekpCCkVpRkQwL3Rjd29Oc0U5NjcxZ2FWQzlKS0xFMjUxYzA1azFYbVdNOENnWUVBejNMMHlFM3h3b3F4ZVVHbWxjUlYKcldOTEJTSWEwLzdxbTkyVXJ1UTFmSzFXN29GeEpLK3p2RWNWRU94UkR4Q3YvTFY2WUhVRlJBMmJFLzl6M3JoagpQQ09GQ3QwRXJUUlJEUGdGajZ3WEZ4clFnS096ZEZxTGJWNkxQQ0RMV3Z2UU5tL2RROXVDUVZ3YXpBZGdDK1h3CmplYUJTSHpUQWhkdnpmRlVQYm1YYWxFQ2dZRUEzU0V4QmZUR3ZkdUl1NXNkOUVvQ3R1SkpiRUIzWDRxRGdsc2UKSEJMTzJKTWtmYk5KWC9RMnR4N0kvcWY3d0dpWERxK1I2MVl4aU5SOWdBTGI5M05PMzFOamk2Y1JuZnV4OGlUNApIU2I1ZDJZb0RpV043aTB6UjFZMmdMcmFjNEJJRzRWQ3JzSi9Bc2M5SXYwZndub3RjOFA2ejB4Y0tFVGFlcm04Ci8vNUNKK2NDZ1lCc25vWWlVcEFrdUgrc1FQYlFXQTExazZjT3NLbkUrQVB0MFdPS3M3enBhQjVkUlU3QUpFazcKMU5jdkZ5dmd0cTBPSU54RmlQS21oMVFISmVqd3h5aU1meDF0Nnk2bTJJM1R3U2oyc25HZlozaHM3RUZXeWl4aAoxeDJTMXhTNDVoYjk5bHhVVHhaREI3ZHlEQ0Z3U3Q4WjNCVjZwaVZaT3RkYjVDS3pMVHJSS2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=