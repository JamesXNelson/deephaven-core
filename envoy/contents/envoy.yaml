admin:
  # access_log_path: /dev/stdout
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9090
static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 10000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout" # easier debugging
                codec_type: AUTO
                stat_prefix: ingress_https
                upgrade_configs:
                  - upgrade_type: websocket
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: reverse_proxy
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                            headers:
                              - name: "sec-websocket-protocol"
                                present_match: true
                          route: { cluster: grpc-proxy }
                        - match: # Call to / goes to the landing page
                            path: "/"
                          route: { cluster: web }
                        - match: # Web IDE lives in this path
                            prefix: "/ide"
                          route: { cluster: web }
                        - match: # JS API lives in this path
                            prefix: "/jsapi"
                          route: { cluster: web }
                        - match: # JS Plugins live at this path
                            prefix: "/js-plugins"
                          route: { cluster: web }
                        - match: # Notebook file storage at this path
                            prefix: "/notebooks"
                          route: { cluster: web }
                        - match: # Application mode layout storage at this path
                            prefix: "/layouts"
                          route: { cluster: web }
                        - match: # Embed a widget for iframe support at this path
                            prefix: "/iframe"
                          route: { cluster: web }
                        - match: # The controller serves /health url
                            prefix: "/health"
                          route: { cluster: control }
                        - match: # The controller serves /health url
                            prefix: "/healthz"
                          route: { cluster: control }
                        - match: # Any GRPC call is assumed to be forwarded to the real service
                            prefix: "/"
                            grpc: {}
                          route:
                            cluster: server
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                            timeout: 0s
                        - match: # Any other call made will be forwarded to the grpc websocket proxy
                            prefix: "/"
                          route:
                            cluster: grpc-proxy
                http_filters:
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: false
                      headers:
                        - name: ":path"
                          exact_match: "/healthz"
                        - name: "x-envoy-livenessprobe"
                          exact_match: "healthz"
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.router
          #transport_socket:
          #  name: envoy.transport_sockets.tls
          #  typed_config:
          #    "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          #    session_timeout: 3600s
          #    common_tls_context:
          #      alpn_protocols: ["h2"]
          #      # When using tls, these certificates are "what you present to the browser", and MUST be trusted by clients
          #      tls_certificates:
          #        - certificate_chain:
          #            filename: /etc/ssl/dh/tls.crt
          #          private_key:
          #            filename: /etc/ssl/dh/tls.key
  clusters:
    - name: grpc-proxy
      connect_timeout: 10s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      common_http_protocol_options:
        max_stream_duration: 3000s
      load_assignment:
        cluster_name: grpc-proxy
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: grpc-proxy # assuming the name of the grpc-api server container
#                      address: 127.0.0.1
                      port_value: 8008
    - name: server
      connect_timeout: 10s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      common_http_protocol_options:
        max_stream_duration: 3000s
      load_assignment:
        cluster_name: server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: server # here we assume the name of the server
                      port_value: 8888
      #      health_checks:
      #        timeout: 1s
      #        interval: 10s
      #        unhealthy_threshold: 2
      #        healthy_threshold: 2
      #        grpc_health_check: { }

      # When enabling tls, these certificates are internal, and can be self signed. Can be generated with gen-certs.sh
      # If enabling this, the tls.crt and tls.key generated by gen-certs.sh should be used by grpc-api
      # grpc-api will use TLS_CHAIN=tls.crt and TLS_KEY=tls.key while envoy uses the ca.crt in transport_socket, below:
      #transport_socket:
      #  name: envoy.transport_sockets.tls
      #  typed_config:
      #    "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
      #    common_tls_context:
      #      validation_context:
      #        trusted_ca:
      #          filename: /etc/ssl/internal/ca.crt
    - name: web
      connect_timeout: 10s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      http_protocol_options: {}
      load_assignment:
        cluster_name: web
        endpoints:
          - lb_endpoints:
              - endpoint:
                  hostname: web
                  address:
                    socket_address:
                      address: web
                      #address: 127.0.0.1
                      port_value: 8080
    - name: control
      connect_timeout: 10s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      http_protocol_options: {}
      load_assignment:
        cluster_name: control
        endpoints:
          - lb_endpoints:
              - endpoint:
                  hostname: control
                  address:
                    socket_address:
                      address: demo-server
                      port_value: 7117
